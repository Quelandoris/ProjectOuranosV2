<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables all items regardless of type share
ILvl=0; //The level of the item
PlayerNear=false; //When player is nearby, this should turn true, and enable drawing gui resources
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If player is nearby, enable GuiDrawing of Sprite Interface for swapping items.
PlayerNear=false;
/*if(visible){
    if(distance_to_object(Player_ob)&lt;10){
        if(id==instance_nearest(Player_ob.x,Player_ob.y,Item_ob)){
            show_debug_message("OWN ID: " + string(id) + ", NEAREST ID: " + string(instance_nearest(Player_ob.x,Player_ob.y,Item_ob)))
            PlayerNear=true;
        }
    }
    else{
        PlayerNear=false;
    }
}
else{
    PlayerNear=false;
}(/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the text for an item when player is nearby
draw_self();

if(PlayerNear){
    //Draw a button prompt &amp; stat information for the weapon
    draw_sprite(KeyboardC_sp,0,x,y-50);
    draw_set_colour(c_black);
    draw_rectangle(x-50,y-67,x+50,y-120,false);
    draw_set_colour(c_white);
    draw_set_font(Bodoni_ft);
    draw_set_halign(fa_center);
    //Find what kind of item it is
    if(object_get_parent(object_index)==Weapon_ob){
        //Determine name of object, truncated with Item Level
        if(object_index==Sword_ob){
            draw_text(x,y-120,"Sword +" + string(ILvl));
        }
        else if(object_index==Bow_ob){
            draw_text(x,y-120,"Bow +" + string(ILvl));
        }
        //Attack Power
        draw_text(x,y-110,"Attack Power: " + string(AtkPower));
        //Attack rate
        draw_text(x,y-100, "Attack rate: " + string(AtkRate));
        //Misc effects. Only show effects the player actually has, and dont repeat. Currently should be capped to only showing 3 effects, since there are only 3 effects.
        var SunderUsed=false;
        var KnockbackUsed=false;
        var AtkBurnUsed=false;
        for(i=1 ; i&lt;3 ; i++){
            if(Sunder&gt;0 &amp;&amp; !SunderUsed){
                SunderUsed=true;
                draw_text(x,y-(100-(i*10)),"Sunder: " + string(Sunder) + "%");
            }
            else if(Knockback&gt;0 &amp;&amp; !KnockbackUsed){
                KnockbackUsed=true;
                draw_text(x,y-(100-(i*10)),"Knockback: " + string(Knockback) + "lbs");
            }
            else if(AtkBurn&gt;0 &amp;&amp; !AtkBurnUsed){
                AtkBurnUsed=true;
                draw_text(x,y-(100-(i*10)),"Burn: " + string(AtkBurn) + "%");
            }
        }
    }
    else if(object_index==Armor_ob){
        draw_text(x,y-120,"Armor +" + string(ILvl));
        draw_text(x,y-110,"Defense: " + string(Defense));
    }
    else if(object_get_parent(object_index)==Trinket_ob){
        //check for health potion
        if(object_index==HealthPotion_ob){
            draw_text(x,y-120,"Health Potion +" + string(ILvl));
            draw_text(x,y-110,"Healing: " + string(Healing));
            draw_text(x,y-100,"Cooldown: " + string(Cooldown) + " Secs");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
